<?php

App::import('Vendor', 'Amazon', array('file' => 'Amazon/aws-sdk/sdk.class.php'));

class ParseSiteController extends AppController {

	/*
	*	RECEIVES SITE_ID AND CONVERTS THE CRAWLER FIREHOSE INTO A LIST OF VALID CHANNEL URLS
	*/

	var $name = 'ParseSite';
	var $uses = array('SiteCron','ChannelCron','ChannelTypeCron','BlacklistCron','ParseCleanPatternTypeCron','ParseCleanPatternCron','Channel','Blacklist','Log');
	var $components = array('Amazonsdk.Amazon');

	var $site_id;
	var $locked_site_data;
	var $job_id;
	var $site_url;
	var $channel_urls = array();
	var $channel_url_regex;
	var $crawl_file_dir;
	var $target_crawl_file;
	var $file_handle;
	var $channel_types;
	var $channel_type_id;
	var $channel_type_pattern;
	var $channel_type_pattern_not;
	var $parse_clean_patterns;
	var $parse_clean_pattern_types;
	var $do_clean;
	var $dump_80;
	var $dump_me;
	var $allow_writes;
	var $channel_type_do_prefix;

	function setSiteId($siteid) {
		$this->site_id = (int)$siteid;
	}

	function init() {
		$this->locked_site_data = null;
		$this->job_id = 0;
		$this->site_url = null;
		unset($channel_urls);
		$this->channel_url_regex = '$\b(https?|ftp|file)://[-A-Z0-9+&@#/%?=~_|!:,.;]*[-A-Z0-9+&@#/%=~_|]$i';
		$this->crawl_file_dir = 'uploads/80legs/';
		$this->crawl_file_suffix = '.txt';
		$this->target_crawl_file = null;
		$this->file_handle = null;
		$this->channel_types = null;
		$this->channel_type_id = null;
		$this->channel_type_pattern = null;
		$this->channel_type_pattern_not = null;
		$this->channel_type_do_prefix = 0;
		$this->parse_clean_patterns = null;
		$this->parse_clean_pattern_types = null;
		$this->do_clean = 1;
		$this->dump_80 = 0;
		$this->dump_me = 0;
		$this->allow_writes = 1;
	}

	function run() {
		$this->evalSiteId();
		$this->setTimeLimit();
		$this->readChannelTypes();
		$this->evalChannelTypes();
		$this->constructTargetCrawlFile();
		$this->evalCrawlFile();
		$this->readParseCleanPatternData();
		$this->evalParseCleanPatternData();
		$this->readParseCleanPatternTypeData();
		$this->evalParseCleanPatternTypeData();
		$this->readLockedSiteData();
		$this->evalLockedSiteData();
		$this->assignLockedSiteData();
		$this->openCrawlFile();
		$this->contructCrawlFileArray();
		$this->closeCrawlFile();
		$this->dumpChannelUrls();
		$this->loopChannelTypes();
		return 1;
	}

	function destruct() {
		unset($this->site_id);
		unset($this->locked_site_data);
		unset($this->job_id);
		unset($this->site_url);
		unset($this->channel_urls);
		unset($this->channel_url_regex);
		unset($this->crawl_file_dir);
		unset($this->target_crawl_file);
		unset($this->file_handle);
		unset($this->channel_types);
		unset($this->channel_type_id);
		unset($this->channel_type_pattern);
		unset($this->channel_type_pattern_not);
		unset($this->channel_type_do_prefix);
		unset($this->parse_clean_patterns);
		unset($this->parse_clean_pattern_types);
		unset($this->do_clean);
		unset($this->dump_80);
		unset($this->dump_me);
		unset($this->allow_writes);
	}

	function evalSiteId() {
		if (!isset($this->site_id)) { throw new siteException('Site id must be set'); }
	}

	function setTimeLimit() {
		set_time_limit(0);
	}

	function readChannelTypes() {
		$this->channel_types = $this->ChannelTypeCron->getActive();
	}

	function evalChannelTypes() {
		if (($this->channel_types === false) or (!$this->channel_types)) { throw new siteException('No active channel types; cannot proceed'); }
	}

	function constructTargetCrawlFile() {
		$this->target_crawl_file = $this->crawl_file_dir . $this->site_id . $this->crawl_file_suffix;
	}

	function evalCrawlFile() {
		//if ((file_exists($this->target_crawl_file) === false) or (!$this->target_crawl_file)) { throw new siteException('No crawl file on the framework for site ' . $this->site_id . '; cannot proceed'); }
	}

	function readParseCleanPatternData() {
		$this->parse_clean_patterns = $this->ParseCleanPatternCron->getActive();
	}

	function evalParseCleanPatternData() {
		if (!$this->parse_clean_patterns) { $this->do_clean = 0; }
	}

	function readParseCleanPatternTypeData() {
		$this->parse_clean_pattern_types = $this->ParseCleanPatternTypeCron->getActive();
	}

	function evalParseCleanPatternTypeData() {
		if (!$this->parse_clean_pattern_types) { $this->do_clean = 0; }
	}

	function readLockedSiteData() {
		$this->locked_site_data = $this->SiteCron->getLockedForParsing($this->site_id);
	}

	function evalLockedSiteData() {
		if (($this->locked_site_data === false) or (!$this->locked_site_data)) {
			$msg = 'No data for locked site ' . $this->site_id . '; cannot proceed';
			$this->writeSiteStageLock(1, 0, $msg);
			$this->writeLog($msg);
			throw new siteException($msg);
		}
	}

	function assignLockedSiteData() {
		$this->job_id = $this->locked_site_data['SiteCron']['jobid'];
		$this->site_url = $this->locked_site_data['SiteCron']['url'];
	}

	function openCrawlFile() {

		//do S3 here
		$bucket = 'vdr-80legs';
		$keyname = $this->site_id . $this->crawl_file_suffix;
		$filepath = 'downloads/' . $this->site_id . $this->crawl_file_suffix;

		$response = $this->Amazon->S3->get_object($bucket, $keyname, array('fileDownload' => $filepath));

		//var_dump($response);
		//http://docs.aws.amazon.com/AmazonS3/latest/dev/ErrorBestPractices.html
		//The NoSuchKey and NoSuchBucket Amazon S3 errors both map to the HTTP 404 Not Found status code.
		//var_dump($response->status) = int(404) = error; int(200) = ok

		if ($response->status != 200) {
			$this->writeLog('FATAL ERROR: Cannot locate crawl results file');
			throw new siteException('cannot locate crawl results file');
		}

		//open the downloaded file here
		$this->file_handle = fopen($filepath, "r");

		//old
		//$this->file_handle = fopen($this->target_crawl_file, "r");

	}

	function contructCrawlFileArray() {
		ini_set("memory_limit","144M");
		$i = 0;
		$temp_urls = array();
		$all_urls = array();
		$unique_urls = array();
		while (!feof($this->file_handle)) {
			$row = strtolower(fgets($this->file_handle));
			if (((strpos($row, "http") == 0) AND (strpos($row, "www.") == 0))) { continue; }
			preg_match_all($this->channel_url_regex, $row, $extract, PREG_PATTERN_ORDER);
			foreach ($extract[0] as $e) { $temp_urls[] = $e; }
			if ($i == 1000) {
				$temp_urls = array_unique($temp_urls);

				foreach ($temp_urls as $t) {
					$all_urls[] = $t;
				}

				$temp_urls = array();
				$i = 0;
			}
			$i++;
		}
		$temp_urls = array_unique($temp_urls);
		foreach ($temp_urls as $t) {
			$all_urls[] = $t;
		}
		$temp_urls = array();

		$unique_urls = array_unique($all_urls);
		sort($unique_urls);
		$this->channel_urls = $unique_urls;
		unset($temp_urls);
		unset($all_urls);
		unset($unique_urls);
	}

	function closeCrawlFile() {
		fclose($this->file_handle);
	}

	function dumpChannelUrls() {
		if ($this->dump_80 == 1) {
			echo '<b>SITE ID: ' . $this->site_id . '</b><br />';
			echo '<br />FROM THE 80 LEGS CRAWL FILE:<br />-----------------------<br />';
				foreach ($this->channel_urls as $u) {
					echo $u . '<br />';
				}
			echo '<br />PARSER RESULTS:<br />-----------------------<br /><br />';
		}
	}

	function loopChannelTypes() {
		foreach ($this->channel_types as $c) {

			$this->assignChannelTypeData($c);

			$res = $this->doWhitelist($this->channel_urls);
			if (!$res) { continue; }
			if ($this->dump_me == 1) { $this->dumpMe($res, 'whitelist dump'); }

			$res = $this->doBlacklist($res);
			if (!$res) { continue; }
			if ($this->dump_me == 1) { $this->dumpMe($res, 'blacklist dump'); }

			if ($this->channel_type_do_prefix == 1) {
				$res = $this->doPrefix($res);
				if (!$res) { continue; }
				if ($this->dump_me == 1) { $this->dumpMe($res, 'prefix dump'); }
			}

			$res = $this->doDecode($res);
			if ($this->dump_me == 1) { $this->dumpMe($res, 'decode dump'); }

			if ($this->do_clean == 1) {
				$res = $this->doClean($res);
				if (!$res) { continue; }
				if ($this->dump_me == 1) { $this->dumpMe($res, 'clean dump'); }
			}

			$res = $this->doExact($res);
			if (!$res) { continue; }
			if ($this->dump_me == 1) { $this->dumpMe($res, 'exact dump'); }

			if ($this->allow_writes == 1) { $this->writeDistilledUrls($res); }

			if ($this->dump_me == 1) { echo '----------------------------<br /><br />'; }
		}
	}

	function assignChannelTypeData($c) {
			$this->channel_type_id = $c['ChannelTypeCron']['id'];
			$this->channel_type_pattern = $c['ChannelTypeCron']['pattern'];
			if (isset($c['ChannelTypeCron']['patternnot'])) { $this->channel_type_pattern_not = $c['ChannelTypeCron']['patternnot']; } else { $this->channel_type_pattern_not = '*'; }
			$this->channel_type_do_prefix = $c['ChannelTypeCron']['doprefix'];
	}

	function doWhitelist ($in_urls) {
		$out_urls = array();
		$patterns_e = array();
		$patterns_e = explode(";", $this->channel_type_pattern);
		foreach ($in_urls as $in_url) {
			foreach($patterns_e as $key => $value) {
				$value = trim($value);
				if  (!empty($value)) {
					$pos = strpos($in_url, $value);
					if ($pos != 0) {
						$out_urls[] = $in_url;
						continue;
					}
				}
			}
		}
		$out_urls = array_unique($out_urls);
		return $out_urls;
	}

	function doBlacklist($in_urls) {
		$out_urls = array();
		$pattern_nots_e = array();
		$pattern_nots_e = explode(";", $this->channel_type_pattern_not);
		$pass = 1;
		foreach ($in_urls as $in_url) {
			foreach($pattern_nots_e as $key => $value) {
				$value = trim($value);
				if  (!empty($value)) {
					$pos = strpos($in_url, $value);
					if ($pos != 0) {
						$pass = 0; //black list value found
					}
				}
			}
			if ($pass == 1) {
				$out_urls[] = $in_url;
			} else {
				if ($this->allow_writes == 1) { $this->writeBlacklistUrl($in_url); }
				$pass = 1;
			}
		}
		$out_urls = array_unique($out_urls);
		return $out_urls;
	}

	function doPrefix($in_urls) {
		$out_urls = array();
		$patterns_e = array();
		$patterns_e = explode(";", $this->channel_type_pattern);
		foreach ($in_urls as $in_url) {
			foreach ($patterns_e as $key => $value) {
				$value = trim($value);
				if  (!empty($value)) {
					$pos = strpos($in_url, $value);
					if ($pos) {
						$test_url = substr($in_url, $pos, strlen($in_url));
						if ($test_url == $value) {
							$out_urls[] = $in_url;
						} else {
							if (substr($value, 0, 1) == '/') { $x = 'http:/'; } else { $x = 'http://'; }
								$in_url = $x . $test_url;
								$out_urls[] = $in_url;
								break;
						}
					}
				}
			}
		}
		$out_urls = array_unique($out_urls);
		return $out_urls;
	}

	function doDecode($in_urls) {
		$out_urls = array();
		foreach ($in_urls as $in_url) {
			if (strpos($in_url, '/+') == false) {
				$out_urls[] = urldecode($in_url);
			} else {
				$out_urls[] = $in_url;
			}
		}
		return $out_urls;
	}

	function doClean($in_urls) {
		$out_urls = array();
		foreach ($in_urls as $in_url) {
			foreach ($this->parse_clean_pattern_types as $type) {
				$one_id = $type['ParseCleanPatternTypeCron']['id'];
				$recurse = $type['ParseCleanPatternTypeCron']['recurse'];
				foreach ($this->parse_clean_patterns as $pattern) {
					$many_id = $pattern['ParseCleanPatternCron']['parse_clean_pattern_type_id'];
					if ($many_id == $one_id) {
						if ($recurse == 1) {
							for ($i = 0; $i < 10; $i++) {
								$pos = 0;
								$recurse_res = 0;
								$pat = (string)$pattern['ParseCleanPatternCron']['pattern'];
								$replace_with = $pattern['ParseCleanPatternCron']['replace_with'];
								$phpcode = $type['ParseCleanPatternTypeCron']['phpcode'];
								eval($phpcode);
								if ($recurse_res = 0) { break; }
							}
						} else {
							$pos = 0;
							$pat = (string)$pattern['ParseCleanPatternCron']['pattern'];
							$replace_with = $pattern['ParseCleanPatternCron']['replace_with'];
							$phpcode = $type['ParseCleanPatternTypeCron']['phpcode'];
							eval($phpcode);
						}
					}
				}
			}
			$out_urls[] = $in_url;
		}
		$out_urls = array_unique($out_urls);
		return $out_urls;
	}

	function doExact($in_urls) {
		$out_urls = array();
		$res = 0;
		foreach ($in_urls as $in_url) {
			$res = $this->loopExactPatterns($in_url);
			if ($res == 1) { $out_urls[] = $in_url; }
		}
		return $out_urls;
	}

	function loopExactPatterns($in_url) {
		$patterns_e = array();
		$patterns_e = explode(";", $this->channel_type_pattern);
		$res = 1;

		foreach($patterns_e as $key => $value) {
			$value = trim($value);

			$pattern1 = $value;
			if ($in_url === $pattern1) {
				$res = 0;
				break;
			}

			$pattern2 = 'http://' . substr($value, 0, strlen($value) - 1);
			if ($in_url === $pattern2) {
				$res = 0;
				break;
			}

			$pattern3 = 'http://' . substr($value, 1, strlen($value));
			if ($in_url === $pattern3) {
				$res = 0;
				break;
			}

			$pattern4 = 'http://' . $value;
			if ($in_url === $pattern4) {
				$res = 0;
				break;
			}

			$pattern5 = 'http://' . $value . '/';
			if ($in_url === $pattern5) {
				$res = 0;
				break;
			}

			$pattern6 = 'https://' . substr($value, 0, strlen($value) - 1);
			if ($in_url === $pattern6) {
				$res = 0;
				break;
			}

			$pattern7 = 'https://' . substr($value, 1, strlen($value));
			if ($in_url === $pattern7) {
				$res = 0;
				break;
			}

			$pattern8 = 'https://' . $value;
			if ($in_url === $pattern8) {
				$res = 0;
				break;
			}

			$pattern9 = 'https://' . $value . '/';
			if ($in_url === $pattern9) {
				$res = 0;
				break;
			}

			$pattern10 = 'https://' . $value . '/';
			if ($in_url === $pattern10) {
				$res = 0;
				break;
			}

			$pattern1 = '';
			$pattern2 = '';
			$pattern3 = '';
			$pattern4 = '';
			$pattern5 = '';
			$pattern6 = '';
			$pattern7 = '';
			$pattern8 = '';
			$pattern9 = '';
			$pattern10 = '';
		}
		return $res;
	}

	function writeDistilledUrls($in_urls) {
		foreach ($in_urls as $in_url) {
			$check = $this->ChannelCron->getDupChannelUrl($this->site_id, $in_url);
			if (!$check) {
				$this->Channel->create();
				$this->Channel->set(array('site_id' => $this->site_id, 'channel_type_id' => $this->channel_type_id, 'url' => $in_url));
				$this->Channel->save();
			}
		}
	}

	function writeBlacklistUrl($url) {
		$check = $this->BlacklistCron->getCheck($this->site_id, $this->channel_type_id, $url);
		if (!$check) {
			$this->Blacklist->create();
			$this->Blacklist->set(array('site_id' => $this->site_id, 'channel_type_id' => $this->channel_type_id, 'url' => strtolower($url)));
			$this->Blacklist->save();
		}
	}

	function dumpMe($stuff, $label) {
		foreach ($stuff as $s) {
			echo $label . ': &nbsp; ' . $s . '<br />';
		}
		echo '<br />';
	}

	function writeLog($msg) {
		$this->Log->create();
		$this->Log->set(array('site_id' => $this->site_id, 'jobid' => 0, 'method' => 'parser', 'message' => $msg));
		$this->Log->save();
	}

}

class siteException extends Exception{}

?>
